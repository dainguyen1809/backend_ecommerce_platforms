services:
  nginx:
    image: nginx:1.17-alpine
    container_name: nginx_container
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../public:/var/www/public
    ports:
      - 9000:80
    depends_on:
      - app
    command: nginx -g "daemon off;"

  app:
    build:
      context: ../
      dockerfile: docker/Dockerfile
      args:
        COMPOSER_FLAGS: ${COMPOSER_FLAGS}
    container_name: app_container
    restart: always
    environment:
      OPCACHE_SAVE_COMMENTS: ${OPCACHE_SAVE_COMMENTS}
      OPCACHE_VALIDATE_TIMESTAMPS: ${OPCACHE_VALIDATE_TIMESTAMPS}
      OPCACHE_REVALIDATE_FREQ: ${OPCACHE_REVALIDATE_FREQ}
    volumes:
      - ../:/var/www
      - ./php/php.ini:/usr/local/etc/php/php.ini
      - ./php/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf
    depends_on:
      database:
        condition: service_started
      redis:
        condition: service_started
      elasticsearch:
        condition: service_started
    networks:
      - default
      - elastic

  redis:
    container_name: redis_container
    image: redis:alpine
    restart: always
    ports:
      - 6379:6379
    environment:
      REDIS_USER: ${REDIS_USER}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
    volumes:
      - ./data/redis:/data

  database:
    container_name: database_container
    image: postgres:17-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5433:5432'
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: rabbitmq_container
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    networks:
      - default
      - elastic

  # elasticsearch:
  #     container_name: elasticsearch_container
  #     image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
  #     restart: always
  #     environment:
  #         ES_JAVA_OPTS: -Xms1g -Xms1g
  #         bootstrap.memory_lock: "true"
  #         discovery.type: single-node
  #         network.host: 0.0.0.0
  #         transport.host: 127.0.0.1
  #         http.host: 0.0.0.0
  #         xpack.security.enabled: "false"
  #         xpack.security.authc.api_key.enabled: "true"
  #         xpack.monitoring.collection.enabled: "true"
  #         xpack.security.enrollment.enabled: "true"
  #     ports:
  #         - 9300:9300
  #         - 9200:9200
  #     volumes:
  #         - ./data/elasticsearch:/usr/share/elasticsearch/data
  #     networks:
  #         - elastic
  #     healthcheck:
  #         test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
  #         interval: 30s
  #         timeout: 10s
  #         retries: 10
  #

  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx256m -Xms256m
      bootstrap.memory_lock: true
      discovery.type: single-node
      xpack.license.self_generated.type: basic
      xpack.security.enabled: false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - elastic
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200 || exit 1']
      interval: 30s
      timeout: 10s
      retries: 10

  logstash:
    container_name: logstash_container
    image: docker.elastic.co/logstash/logstash:8.15.2
    restart: always
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    ports:
      - '5044:5044'
      - '9600:9600'
    environment:
      LS_JAVA_OPTS: '-Xmx256m -Xms256m'
    networks:
      - elastic

  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.15.2
    restart: always
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch_container:9200"]'
    ports:
      - 5601:5601
    networks:
      - elastic
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    depends_on:
      elasticsearch:
        condition: service_healthy

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.2
    container_name: filebeat_container
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ../storage/logs:/var/www/laravel/storage/logs
    depends_on:
      - logstash
    networks:
      - elastic

networks:
  elastic:
    name: elastic
  default:
